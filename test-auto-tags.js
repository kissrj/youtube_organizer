// Script para testar aplica√ß√£o autom√°tica de tags
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testAutoTags() {
  try {
    console.log('üîç Testando aplica√ß√£o autom√°tica de tags...\n');

    // Buscar um v√≠deo existente
    const video = await prisma.video.findFirst({
      include: {
        tags: {
          include: {
            tag: true
          }
        }
      }
    });

    if (!video) {
      console.log('‚ùå Nenhum v√≠deo encontrado para testar');
      return;
    }

    console.log(`üé¨ V√≠deo encontrado: "${video.title}"`);
    console.log(`üìä Tags atuais: ${video.tags.length}`);

    // Simular an√°lise simples
    console.log('\nüöÄ Fazendo an√°lise simples...');

    // Extrair palavras-chave do t√≠tulo
    const titleWords = video.title.toLowerCase()
      .replace(/[^\w\s]/g, ' ')
      .split(' ')
      .filter(word => word.length > 3)
      .slice(0, 3);

    console.log('üìù Palavras-chave extra√≠das:', titleWords);

    // Buscar tags existentes do usu√°rio
    const existingTags = await prisma.tag.findMany({
      where: {
        name: { in: titleWords },
        userId: video.userId
      }
    });

    console.log(`üîç Tags existentes encontradas: ${existingTags.length}`);

    // Criar tags que n√£o existem
    const newTagNames = titleWords.filter(tagName =>
      !existingTags.some(tag => tag.name === tagName)
    );

    console.log(`üÜï Novas tags a criar: ${newTagNames.length}`);

    let createdTags = [];
    if (newTagNames.length > 0) {
      createdTags = await prisma.tag.createManyAndReturn({
        data: newTagNames.map(name => ({
          name,
          isAuto: true,
          category: 'autom√°tico',
          userId: video.userId
        }))
      });
      console.log(`‚úÖ Tags criadas: ${createdTags.length}`);
    }

    // Combinar tags existentes e criadas
    const allTags = [...existingTags, ...createdTags];
    console.log(`üìä Total de tags para associar: ${allTags.length}`);

    // Associar tags ao v√≠deo criando registros VideoTag
    if (allTags.length > 0) {
      // Verificar associa√ß√µes existentes para evitar duplicatas
      const existingAssociations = await prisma.videoTag.findMany({
        where: {
          videoId: video.id,
          tagId: { in: allTags.map(tag => tag.id) }
        }
      });

      const existingTagIds = existingAssociations.map(assoc => assoc.tagId);
      const newAssociations = allTags
        .filter(tag => !existingTagIds.includes(tag.id))
        .map(tag => ({
          videoId: video.id,
          tagId: tag.id
        }));

      if (newAssociations.length > 0) {
        await prisma.videoTag.createMany({
          data: newAssociations
        });
        console.log(`‚úÖ ${newAssociations.length} novas associa√ß√µes criadas!`);
      } else {
        console.log('‚ÑπÔ∏è Todas as tags j√° est√£o associadas ao v√≠deo');
      }
    }

    // Verificar resultado final
    const updatedVideo = await prisma.video.findUnique({
      where: { id: video.id },
      include: {
        tags: {
          include: {
            tag: true
          }
        }
      }
    });

    console.log(`\nüìä Tags finais no v√≠deo: ${updatedVideo.tags.length}`);
    if (updatedVideo.tags.length > 0) {
      console.log('Tags aplicadas:');
      updatedVideo.tags.forEach(vt => {
        console.log(`  - ${vt.tag.name}`);
      });
    }

  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  } finally {
    await prisma.$disconnect();
  }
}

testAutoTags();