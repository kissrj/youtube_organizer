const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);

async function testImprovedImport() {
  console.log('üß™ TESTANDO SISTEMA DE IMPORTA√á√ÉO MELHORADO...\n');

  try {
    // 1. Verificar se o servidor est√° rodando
    console.log('1Ô∏è‚É£ VERIFICANDO SERVIDOR...');
    await execAsync('curl -s http://localhost:3001/ > nul');
    console.log('‚úÖ Servidor est√° rodando');

    // 2. Testar cria√ß√£o de job
    console.log('\n2Ô∏è‚É£ TESTANDO CRIA√á√ÉO DE JOB...');
    const createResponse = await execAsync(
      'curl -s -X POST http://localhost:3001/api/import/youtube -H "Content-Type: application/json" -d "{\\"importHistory\\":true,\\"importPlaylists\\":true,\\"days\\":1,\\"applyAITags\\":false}"'
    );

    console.log('Resposta de cria√ß√£o:', createResponse.stdout);

    let jobId = null;
    try {
      const createData = JSON.parse(createResponse.stdout);
      if (createData.jobId) {
        jobId = createData.jobId;
        console.log(`‚úÖ Job criado com sucesso: ${jobId}`);
      } else {
        console.log('‚ùå Falha na cria√ß√£o do job');
        return;
      }
    } catch (e) {
      console.log('‚ùå Erro ao fazer parse da resposta de cria√ß√£o');
      return;
    }

    // 3. Aguardar processamento
    console.log('\n‚è≥ Aguardando processamento inicial...');
    await new Promise(resolve => setTimeout(resolve, 2000));

    // 4. Testar m√∫ltiplas verifica√ß√µes de status
    console.log('\n3Ô∏è‚É£ TESTANDO VERIFICA√á√ïES DE STATUS...');

    for (let i = 0; i < 3; i++) {
      console.log(`\nüìä Tentativa ${i + 1}:`);
      try {
        const { stdout: statusResponse } = await execAsync(
          `curl -s "http://localhost:3001/api/import/youtube?jobId=${jobId}"`
        );

        console.log('Resposta de status:', statusResponse);

        try {
          const statusData = JSON.parse(statusResponse);
          console.log(`‚úÖ Status: ${statusData.status}`);
          console.log(`üìà Progresso: ${statusData.overallProgress}%`);
          console.log(`üé¨ V√≠deos: ${statusData.videosImported}`);
          console.log(`üìù Etapa: ${statusData.currentStep}`);

          if (statusData.errors && statusData.errors.length > 0) {
            console.log('‚ö†Ô∏è Erros encontrados:', statusData.errors);
          }

          if (statusData.status === 'completed' || statusData.status === 'failed') {
            console.log('üéâ Job finalizado!');
            break;
          }
        } catch (parseError) {
          console.log('‚ùå Erro ao fazer parse da resposta de status');
        }

      } catch (error) {
        console.log('‚ùå Erro na requisi√ß√£o de status:', error.message);
      }

      // Aguardar entre tentativas
      if (i < 2) {
        console.log('‚è≥ Aguardando 3 segundos...');
        await new Promise(resolve => setTimeout(resolve, 3000));
      }
    }

    // 5. Testar job inexistente
    console.log('\n4Ô∏è‚É£ TESTANDO JOB INEXISTENTE...');
    try {
      const { stdout: notFoundResponse } = await execAsync(
        'curl -s "http://localhost:3001/api/import/youtube?jobId=job_inexistente_12345"'
      );

      console.log('Resposta para job inexistente:', notFoundResponse);

      try {
        const notFoundData = JSON.parse(notFoundResponse);
        console.log(`‚úÖ Status correto: ${notFoundData.status}`);
        console.log(`üìù Mensagem: ${notFoundData.currentStep}`);
        console.log(`‚ö†Ô∏è Erros:`, notFoundData.errors);
      } catch (parseError) {
        console.log('‚ùå Erro ao fazer parse da resposta de job inexistente');
      }

    } catch (error) {
      console.log('‚ùå Erro na requisi√ß√£o de job inexistente:', error.message);
    }

    console.log('\nüéâ TESTE CONCLU√çDO COM SUCESSO!');

  } catch (error) {
    console.log('‚ùå ERRO GERAL NO TESTE:', error.message);
  }
}

testImprovedImport();