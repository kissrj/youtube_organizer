const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);

async function testFrontendFix() {
  console.log('üß™ TESTANDO CORRE√á√ïES DO FRONTEND...\n');

  try {
    // 1. Testar GET sem jobId (deve dar erro 400 com debug info)
    console.log('1Ô∏è‚É£ TESTANDO GET SEM JOBID:');
    try {
      const { stdout } = await execAsync('curl -s "http://localhost:3001/api/import/youtube"');
      const response = JSON.parse(stdout);
      console.log('‚úÖ Resposta esperada (erro 400):', response.error);
      console.log('üìã Detalhes:', response.details);
      if (response.debug) {
        console.log('üêõ Debug info:', response.debug);
      }
    } catch (error) {
      console.log('‚ùå Erro na requisi√ß√£o:', error.message);
    }

    console.log('\n' + '='.repeat(50) + '\n');

    // 2. Testar GET com jobId (deve funcionar)
    console.log('2Ô∏è‚É£ TESTANDO GET COM JOBID:');
    try {
      const { stdout } = await execAsync('curl -s "http://localhost:3001/api/import/youtube?jobId=test_frontend_fix"');
      const response = JSON.parse(stdout);
      console.log('‚úÖ Resposta esperada (status):', response.status);
      console.log('üìä Progresso:', response.overallProgress + '%');
      console.log('üé¨ V√≠deos:', response.videosImported);
    } catch (error) {
      console.log('‚ùå Erro na requisi√ß√£o:', error.message);
    }

    console.log('\n' + '='.repeat(50) + '\n');

    // 3. Testar POST (iniciar importa√ß√£o)
    console.log('3Ô∏è‚É£ TESTANDO POST (INICIAR IMPORTA√á√ÉO):');
    try {
      const { stdout } = await execAsync(
        'curl -s -X POST http://localhost:3001/api/import/youtube -H "Content-Type: application/json" -d "{\\"importHistory\\":true,\\"importPlaylists\\":false,\\"days\\":1,\\"applyAITags\\":false}"'
      );
      const response = JSON.parse(stdout);
      console.log('üì° Resposta do POST:', response);

      if (response.jobId) {
        console.log('‚úÖ Job criado com sucesso:', response.jobId);

        // Testar o jobId retornado
        console.log('\nüîÑ TESTANDO JOBID RETORNADO:');
        const { stdout: statusResponse } = await execAsync(
          `curl -s "http://localhost:3001/api/import/youtube?jobId=${response.jobId}"`
        );
        const statusData = JSON.parse(statusResponse);
        console.log('üìä Status do job criado:', statusData.status);
      } else {
        console.log('‚ùå JobId n√£o retornado:', response);
      }
    } catch (error) {
      console.log('‚ùå Erro no POST:', error.message);
    }

    console.log('\nüéâ TESTE CONCLU√çDO!');
    console.log('\nüí° DICAS PARA TESTE MANUAL:');
    console.log('1. Abra http://localhost:3001/import/youtube');
    console.log('2. Configure as op√ß√µes desejadas');
    console.log('3. Clique em "üöÄ Iniciar Importa√ß√£o"');
    console.log('4. Verifique se n√£o h√° mais erro "Job ID √© obrigat√≥rio"');
    console.log('5. O progresso deve ser exibido corretamente');

  } catch (error) {
    console.log('‚ùå ERRO GERAL NO TESTE:', error.message);
  }
}

testFrontendFix();