// src/components/collections/AddCollectionDialog.tsx
'use client'

import React, { useState } from 'react'
import { CreateCollectionForm } from '@/lib/types'
import { IconPicker } from '../icons/IconPicker'
import { IconSelector } from '../icons/IconSelector'
import { iconComponents } from '../icons/iconComponents'

interface AddCollectionDialogProps {
  isOpen: boolean
  onClose: () => void
  onSubmit: (data: CreateCollectionForm) => void
}

export function AddCollectionDialog({
  isOpen,
  onClose,
  onSubmit
}: AddCollectionDialogProps) {
  const [formData, setFormData] = useState<CreateCollectionForm>({
    name: '',
    description: '',
    icon: 'folder',
    color: '#3b82f6',
    isPublic: false
  })
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [showIconPicker, setShowIconPicker] = useState(false)

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!formData.name.trim()) return

    setIsSubmitting(true)
    try {
      await onSubmit(formData)
      setFormData({
        name: '',
        description: '',
        icon: 'folder',
        color: '#3b82f6',
        isPublic: false
      })
      onClose()
    } catch (error) {
      console.error('Erro ao criar cole√ß√£o:', error)
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleInputChange = (field: keyof CreateCollectionForm, value: string | boolean) => {
    setFormData(prev => ({ ...prev, [field]: value }))
  }

  const handleIconSelect = (iconName: string) => {
    setFormData(prev => ({ ...prev, icon: iconName }))
    setShowIconPicker(false)
  }

  const handleColorChange = (color: string) => {
    setFormData(prev => ({ ...prev, color }))
  }

  const IconComponent = iconComponents[formData.icon || 'folder'] || iconComponents.folder

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
        <div className="flex justify-between items-center p-6 border-b border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900">Nova Cole√ß√£o</h3>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
          >
            <span className="text-2xl">&times;</span>
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nome da Cole√ß√£o *
            </label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => handleInputChange('name', e.target.value)}
              className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Digite o nome da cole√ß√£o"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Descri√ß√£o
            </label>
            <textarea
              value={formData.description}
              onChange={(e) => handleInputChange('description', e.target.value)}
              className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="Descri√ß√£o opcional da cole√ß√£o"
              rows={3}
            />
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                √çcone
              </label>
              <div className="relative">
                <button
                  type="button"
                  onClick={() => setShowIconPicker(!showIconPicker)}
                  className="w-full p-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent flex items-center gap-2"
                >
                  <div
                    className="w-6 h-6 rounded flex items-center justify-center"
                    style={{ backgroundColor: formData.color ? `${formData.color}20` : '#f3f4f6' }}
                  >
                    <IconComponent className="w-4 h-4" />
                  </div>
                  <span className="text-sm text-gray-600 capitalize">
                    {formData.icon || 'folder'}
                  </span>
                </button>
                {showIconPicker && (
                  <div className="absolute top-full left-0 z-10 mt-1">
                    <IconPicker
                      selectedIcon={formData.icon || 'folder'}
                      selectedColor={formData.color || '#3b82f6'}
                      onIconSelect={handleIconSelect}
                      onColorChange={handleColorChange}
                      onClose={() => setShowIconPicker(false)}
                    />
                  </div>
                )}
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Cor
              </label>
              <div className="flex items-center gap-2">
                <input
                  type="color"
                  value={formData.color}
                  onChange={(e) => handleInputChange('color', e.target.value)}
                  className="w-12 h-10 border border-gray-300 rounded cursor-pointer"
                />
                <span className="text-sm text-gray-600">{formData.color}</span>
              </div>
            </div>
          </div>

          <div className="flex items-center">
            <input
              type="checkbox"
              id="isPublic"
              checked={formData.isPublic}
              onChange={(e) => handleInputChange('isPublic', e.target.checked)}
              className="w-4 h-4 text-blue-600 rounded focus:ring-blue-500"
            />
            <label htmlFor="isPublic" className="ml-2 text-sm text-gray-700">
              Tornar cole√ß√£o p√∫blica
            </label>
          </div>

          <div className="flex justify-end gap-3 pt-4">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 text-gray-600 border border-gray-300 rounded hover:bg-gray-50 transition-colors"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={isSubmitting || !formData.name.trim()}
              className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              {isSubmitting ? 'CreatingÖ' : 'Criar Cole√ß√£o'}
            </button>
          </div>
        </form>
      </div>
    </div>
  )
}

